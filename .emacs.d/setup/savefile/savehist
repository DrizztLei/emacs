;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(w3m-input-url-history js--symbol-history anzu--history string-rectangle-history junk-hist search-ring query-replace-history buffer-name-history ido-buffer-history org-read-date-history helm-grep-history shell-command-history helm-file-name-history helm-occur-history tmm--history compile-history Man-topic-history grep-find-history gud-gdb-history ido-file-history helm-M-x-input-history read-expression-history minibuffer-history command-history file-name-history extended-command-history))
(setq w3m-input-url-history '("www.baidu.com"))
(setq string-rectangle-history '("."))
(setq search-ring '("predi" "value" "get the pri=" "model" "trains" "opencv" "learn" "doPa" "cvCa" "learn" "model" "capture" "return" "train" "image" "images"))
(setq query-replace-history '("" "." "rm " "" "rm -rf ~/code" "." "rm -rf" "*" "rm" "*" "rm" "*" "direct" "direc" "bar" "smo" "cus" "pro" "" "\\n" "	" "<div.>" "<div.>" "	" "<div.*>" "<div.*>" "	" "<div*>" "<div*>" "		" "<div class=\"line number* index* alt*\"><code class=\"cpp preprocessor\">" "		" "</div>" "		" "&gt;" "			" "&lt;" "" "\\n" "\\n" "</code>" "point" "limit" "double" "float"))
(setq buffer-name-history '("Ann.cpp" "*eshell*" "*shell*"))
(setq ido-buffer-history '("*eshell*"))
(setq shell-command-history '("echo dd"))
(setq helm-file-name-history '("99-253-51-60.conf" "Ann.cpp" "Makefile" "Makefile" "Train.cpp" "Ann.cpp" "out.cpp" "Client.cpp" "CommandSet.cpp" "Receiver.cpp" "Makefile" "Invoker.cpp" "main.cpp" "Command.cpp" "import.h" "experiment.cpp" "Makefile" "dispatch.cpp" "Makefile" "thread_control.cpp" "thread.cpp" "Makefile" "Makefile" "playercontrols.h" "playlistmodel.cpp" "Ann.cpp" "train.txt" "Makefile" "Train.cpp" "Train.cpp" "Experiment.cpp" "Makefile" "TEST.cpp" "ppt.org" "ppt.txt" "ppt.org" "train.txt" "Ann.cpp" "Train.cpp" "workermi.h" "textin4.cpp" "textin3.cpp" "test.h" "test_bug.cpp" "return_refren.cpp" "placenew1.cpp" "mytime.cpp" "fun_ptr.cpp" "calling.cpp" "Bayes.cpp" "Makefile" "Experiment.cpp" "out.cpp" "source.cpp" "window.o" "AUTHORS" "WORKSPACE" "read.cpp" "sample.txt" "window.cpp" "serialization.cpp" "Ann.cpp" "Train.cpp" "TEST.cpp" "Makefile" "ANN.cpp" "Tool.h" "my-configure.el" "cykbd.el" "test.cpp" "temp.cpp" "practice" "c.org" "Heap.cpp" "Ackerman.cpp" "linear.cpp" "maze.cpp" "_link_stack.cpp" "MacroFind.cpp" "FINALLY.cpp" "Scanner.h" "workermi.h" "Scanner.cpp" "Scanner.h.gch" "Test.cpp" "work" ".bashrc" "BinarryTree.cpp" ".emacs.dp" "Bios - 罪恶王冠.mp3" "Q3CanvasSprite" "Q3CacheIterator" "Q3CanvasSprite" "analysis.cpp" ".Xauthority" ".bash_profile" ".bash_history" ".bash_logout" "Token.cpp" "a.out"))
(setq tmm--history '("f==>File" "e==>Edit" "o==>Options" "b==>Buffers" "t==>Tools" "m==>Minibuf" "h==>Help" "f==>File" "e==>Edit" "o==>Options" "b==>Buffers" "t==>Tools" "m==>Minibuf" "h==>Help" "f==>File" "e==>Edit" "o==>Options" "b==>Buffers" "t==>Tools" "m==>Minibuf" "h==>Help" "f==>File" "e==>Edit" "o==>Options" "b==>Buffers" "t==>Tools" "m==>Minibuf" "h==>Help"))
(setq compile-history '("make " "make all" "make pro" "make smo" "make pro" "make pr" "make smo" "make pro" "make " "make pro" "make pro\\" "make pro" "make smo" "make pro" "make smo" "make pro" "make smo" "make pro" "make smo" "make pro" "make smo" "make pro" "make smo" "make pro" "make smo" "make pro" "make" "g++ Experiment.cpp -o out" "g++ Exee" "make " "make makefile" "g++ -g -fpermissive experiment.cpp -o out" "g++ -g experiment.cpp -o out" "g++ -g experiment4.cpp -o out" "g++ -g -fpermissive experiment.cpp -o out" "g++ -fpermissive experiment.cpp -o out" "g++ -fpermissive experiment.cpp  -o out" "g++ -fpermissive -o out" "g++ -fpermissive experiment.cpp -o out" "g++ experiment.cpp -fpermissive -o out " "g++ -fpermissive experiment.cpp -o out" "g++ experiment.cpp -o out" "gcc -fpermissive experiment.cpp -o b.out" "make" "make " "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o out" "make" "g++ -o out Experiment.cpp -g" "g++ -o out Experiment.cpp" "make" "g++ Bayes.cpp -o out" "make" "g++ Bayes.cpp -o out" "g++ -o out.exe source.cpp" "g++ -O0 -g  source.cpp -o out.exe" "g++ -g  source.cpp -o out.exe" "g++ -g -f source.cpp -o out.exe" "make" "g++ Experiment.cpp -o out" "make" "g++ Experiment.cpp -o experiment.out" "make " "g++ -o hopeful tensorflow.cpp" "pwd" "make" "g++ -o read.out Experiment.cpp" "g++ -o out read.cpp" "make" "g++ -fpermissive source.cpp -o out" "gcc -lstdc++ Experiment.cpp -o a.out" "gcc --lstdc++ Experiment.cpp -o a.out" "make" "g++ TEST.cpp -o out" "make" "g++ TEST.cpp -o out"))
(setq Man-topic-history '("CURLINFO_CONDITION_UNMET(3)" "else" "else" "else" ".emacs" ".emacs" ".emacs" ".emacs" ".emacs" "411toppm(1)" "ldap.conf(5)"))
(setq grep-find-history '("find . -type f -exec grep -nH -e macro {} +" "find . -type f -exec grep -nH -e trmep {} +" "find . -type f -exec grep -nH -e condition {} +" "find . -type f -exec grep -nH -e  {} +" "find . -type f -exec grep -nH -e  {} +e" "find . -type f -exec grep -nH -e temp {} +" "find . -type f -exec grep -nH -e hah {} +" "find . -type f -exec grep -nH -e temp {} +"))
(setq gud-gdb-history '("gdb a.out" "gdb out.exe" "gdb out" "gdb out.exe" "gdb PatternRecognition" "gdb out.exe" "gdb --annotate=3 out.exe" "gdb --annotate=3 source.cpp " "gdb --annotate=3 source.cpp" "gdb --annotate=3 graph.cpp"))
(setq ido-file-history '(nil "c.org"))
(setq helm-M-x-input-history '("name" "w3m" "w3" "eww" "w3" "color" "ecb-a" "js" "init" "temp" "name" "init" "name" "repla" "org" "ecb-a" "colo" "repl" "org" "org-m" "repla" "ecb-a" "csharp" "pac" "ecb-a" "cs" "repla" "rep" "repla" "rep" "repla" "colo" "ecb-a" "ana" "color" "ecb-a" "repla" "clear" "colo" "ecb-a" "color" "ecb" "re" "repla" "ecb" "repla" "replace" "ecb-a" "ecb" "ecb-a" "lin" "line" "ecb-a" "line" "ecb" "line" "globa" "menu-bar" "men" "menu-bar" "eshell" "ecb-a" "ecb" "ecb-a" "ecb-" "ecb-a" "ecb" "ecb-" "ecb" "dir" "evil" "ecb" "clear" "compil" "clear" "compil" "compl" "comp" "yas" "menu-b" "too" "tool-bar" "ecb" "yas" "colo" "yas" #("inc" 0 3 (face font-lock-preprocessor-face fontified t)) "ya" "ecb" "color" "ecb" "package" "ecb" "replace-r" "replace-s" "replace-r" "replace-reg" "repla" "rela" "repla"))
(setq read-expression-history '("wq" "q" "wq" "q" "q!" "q"))
(setq minibuffer-history '("/home/elvis/work/opencv/pattern_recognition/tool" "/home/elvis/work/" "/home/elvis/work/opencv/pattern_recognition/tool.cpp" "/home/elvis/work/opencv/pattern_recognition/" "/home/elvis/work/opencv/pattern_recognition/tool.c" "/home/elvis/work/opencv/" "/home/elvis/work/opencv/cascade_classifier/temp.cpp" "/usr/include/opencv2/core/core.hpp" "/home/elvis/work/opencv/pattern_recognition/detect_recog.h" "/home/elvis/work/opencv/pattern_recognition/detect_recog.cpp" "/home/elvis/work/opencv/pattern_recognition/tool.cp" "/home/elvis/work/opencv/pattern_recognition/" "/home/elvis/work/opencv/pattern_recognition/try.cpp" "/home/elvis/work/opencv" "/home/elvis/work/opencv/pattern_recognition/Mak" "/home/elvis/work/opencv/pattern_recognition/tool.cp" "/home/elvis/work/opencv/svm/" "/home/elvis/work/opencv/cascade_classifier/" "/home/elvis/work/opencv/cascade_classifier/face_detected.cpp" "www.google.com" "www.baidu.com" "/home/elvis/work/js/experiment-2.js" "/home/elvis/work/js/exp" "/home/elvis/work/" "/home/elvis/work/js/main.js" "/home/elvis/work/" "temp" "init" "keyboard macro" "/home/elvis/work/node.js/http.js" "/home/elvis/work/node" "/home/elvis/work/project/PatternRecognition/ANN/svm/Expriment/pure/" "/home/elvis/work/" "/home/elvis/work/project/PatternRecognition/ANN/svm/Expriment/pure/Mak" "/home/elvis/work/project/PatternRecognition/ANN/svm/Expriment/pure/train" "/home/elvis/work/" "/home/elvis/work/os/all/experiment5/" "/home/elvis/work" "/home/elvis/work/" "0" "/home/elvis/work/os/experiment5/" "/home/elvis/work/" "/home/elvis/work/os/experiment6/" "/home/elvis/work/" "/home/elvis/work/ML/tensflow/" "/home/elvis/work/" "690" "569" "/home/elvis/work/os/experiment6/" "517" "500" "423" "222" "/home/elvis/work/os/experiment6/" "/home/elvis/work/" "222" "/home/elvis/work/" "/home/elvis/work/os/experiment6/Mak" "/home/elvis/work/os/experiment6/" "/home/elvis/work/" "/home/elvis/work/os/experiment6/" "//" "/home/elvis/work/os/experiment5/" "/home/elvis/work/" "/home/elvis/work/os/experiment6/" "/home/elvis/work/" "/home/elvis/work/os/experiment6/OneWay.cpp" "/home/elvis/work/os/experiment5/" "/home/elvis/work/os/experiment5/Mak" "/home/elvis/work/" "/home/elvis/work/os/experiment5/mess" "/home/elvis/work/os/experiment5/barbe" "/home/elvis/work/os/experiment5/" "/home/elvis/work/os/experiment5/custo" "/home/elvis/work/" "/home/elvis/work/os/experiment5/" "/home/elvis/work/" "/home/elvis/work/os/experiment5/bar" "/home/elvis/work/os/experiment5/" "/home/elvis/work/os/experiment5/cust" "/home/elvis/work/" "/home/elvis/work/os/experiment5/cu" "/home/elvis/work/" "/home/elvis/enviroment/intel-iot-services-orchestration-layer/" "/home/elvis/work/os/experiment5/message.h" #("key_t" 0 4 (fontified t face font-lock-type-face) 4 5 (fontified t c-type c-decl-id-start face font-lock-type-face)) "/home/elvis/work/os/experiment5/cust" "/home/elvis/work/os/experiment5/barb" "/home/elvis/work/os/experiment5/" "/home/elvis/work/" "/home/elvis/work/os/experiment4/rest/" "/home/elvis/work/os/experiment4/" "/home/elvis/work/os/experiment5/" "/home/elvis/work/os/experiment5/cus" "/home/elvis/work/os/experiment5/" "/home/elvis/work/" "/home/elvis/work/os/experiment5/" "/home/elvis/work/" "/home/elvis/work/os/experiment5/.." "/home/elvis/work/os/experiment5/"))
(setq command-history '((helm-M-x nil "name-last-kbd-macro") (avy-goto-word-1 106 nil) (avy-goto-word-1 106 nil) (w3m-weather "京都府・南部") (helm-M-x nil "w3m-weather") (w3m "http://www.google.com/search?btnI=I%%27m+Feeling+Lucky&ie=UTF-8&oe=UTF-8&q=www.baidu.com" nil t) (helm-M-x nil "w3m") (w3m-goto-url-new-session "http://www.google.com/search?btnI=I%%27m+Feeling+Lucky&ie=UTF-8&oe=UTF-8&q=www.baidu.com" nil nil nil nil) (helm-M-x nil "w3m-goto-url-new-session") (w3m "about:" nil t) (helm-M-x nil "w3m") (browse-url-w3 "www.google.com" nil) (helm-M-x nil "browse-url-w3") (eww "www.google.com") (helm-M-x nil "eww") (avy-goto-word-1 106 nil) (eww "www.baidu.com") (helm-M-x nil "eww") (browse-url-w3 "www.baidu.com" nil) (helm-M-x nil "browse-url-w3") (color-theme-select nil) (helm-M-x nil "color-theme-select") (ecb-activate) (helm-M-x nil "ecb-activate") (Info-top-node) (helm-M-x nil "Info-top-node") (helm-M-x nil "magit-init") (execute-kbd-macro "" nil) (helm-M-x nil "temp") (execute-kbd-macro "" nil) (helm-M-x nil "temp") (execute-kbd-macro "" nil) (helm-M-x nil "temp") (name-last-kbd-macro 'temp) (helm-M-x nil "name-last-kbd-macro") (avy-goto-char 100 nil) (avy-goto-char 108 nil) (avy-goto-char 100 nil) (avy-goto-char 100 nil) (avy-goto-char 108 nil) (avy-goto-char 108 nil) (avy-goto-char 100 nil) (execute-kbd-macro "int main(int argc , char ** argv{" nil) (helm-M-x nil "init") (execute-kbd-macro "int main(int argc , char ** argv{" nil) (helm-M-x nil "init") (execute-kbd-macro "int main(int argc , char ** argv{" nil) (helm-M-x nil "init") (name-last-kbd-macro 'init) (helm-M-x nil "name-last-kbd-macro") (grep-find "find . -type f -exec grep -nH -e macro {} +") (grep-find "find . -type f -exec grep -nH -e trmep {} +") (helm-M-x nil "replace-string") (avy-goto-char 102 nil) (org-mode) (helm-M-x nil "org-mode") (ecb-activate) (helm-M-x nil "ecb-activate") (color-theme-select nil) (helm-M-x nil "color-theme-select") (replace-string "." "" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end)) nil) (helm-M-x nil "replace-string") (org-mode) (helm-M-x nil "org-mode") (color-theme-select nil) (helm-M-x nil "color-theme-select") (goto-line 0 nil) (string-rectangle 1 1 ".") (string-rectangle 1 1 "") (replace-string "." "rm -rf ~/code" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end)) nil) (helm-M-x nil "replace-string") (ecb-activate) (helm-M-x nil "ecb-activate") (csharp-mode) (helm-M-x nil "csharp-mode") (package-list-packages nil) (helm-M-x nil "package-list-packages") (ecb-activate) (helm-M-x nil "ecb-activate") (emacs-version nil) (helm-M-x nil "emacs-version") (replace-string "*" "rm -rf" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end)) nil) (helm-M-x nil "replace-string") (replace-string "*" "rm" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end)) nil) (helm-M-x nil "replace-string") (replace-string "*" "rm" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end)) nil) (helm-M-x nil "replace-string") (replace-string "*" "rm" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end)) nil) (helm-M-x nil "replace-string") (replace-string "*" "rm" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end)) nil) (helm-M-x nil "replace-string") (goto-line 690 nil) (goto-line 690 nil) (color-theme-select nil) (helm-M-x nil "color-theme-select") (ecb-activate) (helm-M-x nil "ecb-activate") (ecb-activate) (helm-M-x nil "ecb-activate") (goto-line 569 nil) (anaconda-mode 'toggle)))
(setq file-name-history '("~/work/opencv/pattern_recognition/tool.cpp" "~/work/opencv/cascade_classifier/temp.cpp" "/usr/include/opencv2/core/core.hpp" "~/work/opencv/pattern_recognition/train.cpp" "~/work/opencv/pattern_recognition/Makefile" "~/work/opencv/svm/svm.cpp" "~/work/js/experiment-1.js" "~/work/js/main-Sun Jul  3 14:32:39 CST 2016.js" "~/work/project/PatternRecognition/ANN/svm/Expriment/pure/Train.cpp" "~/work/project/PatternRecognition/ANN/svm/Expriment/pure/Makefile" "~/work/project/PatternRecognition/ANN/svm/Expriment/pure/train.txt" "~/work/os/all/experiment5/barber.c" "~/work/os/experiment6/OneWay.cpp" "~/work/os/experiment6/Makefile" "~/work/os/experiment5/message.h" "~/work/os/experiment5/customer.c" "~/work/os/experiment5/Makefile" "~/work/os/experiment5/barber.c" "~/work/os/experiment5/cus.elf" "~/work/os/experiment5/customer.cpp" "~/work/os/experiment5/experiment.cpp" "~/work/os/experiment4/provider.cpp" "~/work/os/experiment4/Makefile" "~/work/os/experiment4/smoker.cpp" "~/work/os/experiment4/consumer.cpp" "~/work/os/experiment4/pro.elf" "~/work/project/oop/CommandSet.cpp" "~/work/os/experiment4/experiment.cpp" "~/work/project/oop/Client.cpp" "~/work/java/TankSnake/src/MyTankSnake/temp" "~/work/java/TankSnake/src/MyTankSnake/Shot.java" "~/work/java/TankSnake/src/MyTankSnake/SnakeAct.java" "~/work/java/TankSnake/src/MyTankSnake/SnakeMain.java" "~/work/java/TankSnake/src/MyTankSnake/SnakeWin.java" "~/work/java/TankSnake/src/MyTankSnake/Wall.java" "~/work/os/experiment4/result/Makefile" "~/work/os/experiment4/Smoker.c" "~/work/os/experiment4/Makefile.bp" "~/work/os/experiment4/producer.cpp" "~/work/os/experiment4/ipc.cpp" "~/work/os/experiment2/control.cpp" "~/work/project/PatternRecognition/svm/Expriment/pure/Ann.cpp" "~/work/project/PatternRecognition/svm/Expriment/Train.cpp" "~/work/project/PatternRecognition/svm/Expriment/pure/Makefile" "~/work/project/PatternRecognition/svm/Expriment/pure/99-253-51-60.conf" "~/work/project/PatternRecognition/svm/Expriment/pure/Train.cpp" "~/work/project/PatternRecognition/Ann.cpp" "~/work/project/PatternRecognition/out.cpp" "~/work/project/oop/Receiver.cpp" "~/work/project/oop/Makefile" "~/work/project/oop/Invoker.cpp" "~/work/project/oop/main.cpp" "~/work/project/oop/Command.cpp" "~/work/project/oop/import.h" "~/work/os/experiment3/Makefile" "~/work/os/experiment3/dispatch.cpp" "~/work/os/experiment2/Makefile" "~/work/os/experiment2/thread_control.cpp" "~/work/os/experiment2/thread.cpp" "~/work/os/experiment1/Makefile" "~/work/os/Makefile" "~/work/QT/VLC/VLC_0.4/multimediawidgets/player/playercontrols.h" "~/work/QT/VLC/VLC_0.4/multimediawidgets/player/playlistmodel.cpp" "~/work/project/PatternRecognition/svm/Ann.cpp" "~/work/project/PatternRecognition/svm/Expriment/pure/train.txt" "~/work/project/PatternRecognition/svm/Makefile" "~/work/project/PatternRecognition/svm/Train.cpp" "~/work/project/PatternRecognition/Train.cpp" "~/work/project/PatternRecognition/Experiment.cpp" "~/work/project/PatternRecognition/Makefile" "~/work/project/PatternRecognition/TEST.cpp" "/sudo:root@localhost:/home/elvis/work/project/PatternRecognition/ppt.org" "~/work/project/PatternRecognition/ppt.txt" "~/work/project/PatternRecognition/ppt.org" "~/work/project/PatternRecognition/train.txt" "~/Desktop/work/project/PatternRecognition/Ann.cpp" "~/Desktop/work/project/PatternRecognition/Train.cpp" "~/work/cpp/workermi.h" "~/work/cpp/textin4.cpp" "~/work/cpp/textin3.cpp" "~/work/cpp/test.h" "~/work/cpp/test_bug.cpp" "~/work/cpp/return_refren.cpp" "~/work/cpp/placenew1.cpp" "~/work/cpp/mytime.cpp" "~/work/cpp/fun_ptr.cpp" "~/work/cpp/calling.cpp" "~/work/project/PatternRecognition/Bayes.cpp" "~/work/project/B-Tree/Makefile" "~/work/project/B-Tree/Experiment.cpp" "~/work/project/B-Tree/out.cpp" "~/work/project/B-Tree/source.cpp" "~/work/project/B-Tree/window.o" "~/tensorflow/AUTHORS" "~/tensorflow/WORKSPACE" "~/work/project/PatternRecognition/read.cpp" "~/work/project/PatternRecognition/sample.txt" "~/work/project/B-Tree/window.cpp" "~/work/project/PatternRecognition/serialization.cpp" "/../home/eva/work/project/PatternRecognition/Ann.cpp"))
(setq extended-command-history '("w3m-weather" "w3m" "w3m-goto-url-new-session" "eww" "color-theme-select" "ecb-activate" "name-last-kbd-macro" "org-mode" "replace-string" "csharp-mode" "package-list-packages" "emacs-version" "anaconda-mode" "my-eshell-clear-buffer" "line-number-mode" "global-linum-mode" "menu-bar-mode" "menu-bar-read-mail" "ecb-change-layout" "evil-mode" "compile" "tool-bar-mode" "yas-expand" "yas-new-snippet" "yas/expand" "replace-regexp" "indent-relative" "ecb-window-sync" "ecb-display-news-for-upgrade" "ecb-hide-ecb-windows" "yas/load-directory" "yas-reload-all" "package-install" "aya-create" "slime-mode" "color-theme-vim-colors" "shell" "gdb" "c++-mode" "helm-info-ccmode" "makefile-automake-mode" "demangle-mode" "text-mode" "c-mode" "org-cycle" "prog-mode" "color-theme-euphoria" "flycheck-mode" "java-mode" "column-number-mode" "read-color" "prelude-update" "lisp-mode" "load-theme"))
(setq search-ring '("predi" "value" "get the pri=" "model" "trains" "opencv" "learn" "doPa" "cvCa" "learn" "model" "capture" "return" "train" "image" "images"))
(setq regexp-search-ring '("addlim" "waitpid" "adjust" "Get" "show I" "new node"))
